#!/usr/bin/python
# executable for automated segmentation of mouse OCT
# FIXME-- looping variable names are inaccurate
import cv2
import numpy as np
import math
import scipy.signal as sig
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os

CUR_IMAGE_PATH = '/home/maxberko/seg_automation/example_stack.jpg'
original = cv2.imread(CUR_IMAGE_PATH)

def collect_coordinates(row_start=0):
	x_coord_arr = [] # array of x coordinate sets
	for j in range(0, cols):

		# temp set for each column
		row_set = []
		for i in range(row_start, rows-1):
			# black to white
			if binary[i, j] == 0 and binary[i+1, j] == 255:
				row_set.append(i)

		x_coord_arr.append(row_set)
	return x_coord_arr

# data must be numpy array
# stdev default
def reject_outliers(data, m=1):
	y = [y[1] for y in data]

	elements = np.array(y)
	mean = np.mean(elements, axis=0)
	sd = np.std(elements, axis=0)

	# gathers list of data points to remove
	iter_list = []
	for i in range(len(y)):
		if (y[i] < mean - m * sd) or (y[i] > mean + m * sd):
			iter_list.append(data[i])

	# remove points from data set
	# that were collected in iter_list
	for e in iter_list:
		if e in data:
			data.remove(e)

	# remove middle
	l = len(data)/2
	data = data[:l-30] + data[l+30:]

	return data

# takes in a list of pairs (x, y)
def draw(arr, d_img, color=(0, 255, 0)):
	for i in range(len(arr)-1):
		p1 = arr[i]
		p2 = arr[i+1]
		cv2.line(d_img, (p1[0], p1[1]), (p2[0], p2[1]), color, 2)

# takes in 2 lists of x and y coordinates
# fits data to 12th degree polynomial
# plots original data with fitted data and returns
# best fit
def curve_fit(x, y, dgr=12):
	plt.plot(x, y, 'bo-')

	x = np.array(x)
	y = np.array(y)

	x = x.reshape(-1, 1)
	poly = PolynomialFeatures(degree=dgr)
	X_poly = poly.fit_transform(x)
	poly.fit(X_poly, y)

	linreg = LinearRegression()
	linreg.fit(X_poly, y)

	y_pred = linreg.predict(X_poly)

	# fitted polynomial
	plt.plot(x, y_pred, color='red')
	plt.savefig('0_plot.png')

	return y_pred

# takes in and produces a single array of points
# calls curve_fit to smoothen out an existing array
# fits to 9th degree polynomial
def smoothen(arr):
	x, y = [], []
	for p in range(len(arr)/2):
		x.append(arr[p][0])
		y.append(arr[p][1])
	pred_y = curve_fit(x, y, dgr=9)

	combined = []
	for i in range(len(pred_y)):
		combined.append((x[i], int(pred_y[i])))
	return combined

print('running threshold')

############################################
# make binary copy which will not be saved
# but is used to determine where to 
# draw lines on the original image
### VALUES: 0-black, 255-white
############################################
img_bw = cv2.imread(CUR_IMAGE_PATH, cv2.IMREAD_GRAYSCALE)
rows, cols = img_bw.shape

(thresh, binary) = cv2.threshold(img_bw, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
## additional manipulation to remove any outliers
binary = cv2.medianBlur(binary, 5)

print('finding starting row')
x_coord_arr = collect_coordinates()
top = [(i, x[0]) for i, x in enumerate(x_coord_arr)]

print('removing outliers top')
top = reject_outliers(top, m=2)

#####################################################################################

# read in and save a jpeg
grayscaled = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)

## adaptive gaussian thresholdng
# second to last value: focuses on how specific to filter color (higher value = sloppy thresholding)
# last value: switches between black (neg) and white (pos) -- higher values increase intensity
threshold = cv2.adaptiveThreshold(grayscaled, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 37, -2)
#37 -2
# remove salt and pepper noise- convert to BGR colour channelis
median_reduction = cv2.medianBlur(threshold, 5)
img_thresh = cv2.medianBlur(median_reduction, 5)
#img = cv2.cvtColor(median_reduction, cv2.COLOR_GRAY2BGR)

################################
# uses thresholded image and top arr
# of coordinate points to mark the lower
# strip of the upper bound
################################
top_lower = [] # array of coordinates
for pair in top:
	for y in range(pair[1], rows-1): 
		x = pair[0]
		# white to black
		if img_thresh[y, x] == 255 and img_thresh[y+1, x] == 0:
			top_lower.append((x, y+1))
			break	

print('removing outliers top bottom')
top_lower = reject_outliers(top_lower, m=2)


# use thresholded image to find bottom of retina
bot = []
for c in range(cols):
	for r in range(rows-1, 0, -1):
		if img_thresh[r, c] == 0 and img_thresh[r-1, c] == 255:
			bot.append((c, r))
			break

bot = reject_outliers(bot, m=1)

# smoothes out curves
smooth_top = smoothen(top)
draw(smooth_top, original)

smooth_toplower = smoothen(top_lower)
draw(smooth_toplower, original)

smooth_bot = smoothen(bot)
draw(smooth_bot, original)

#####################################################################################
# averages top and bottom lines defining the retina
med = []
for c in range(cols):
	green = []
	for r in range(rows-1):
		if list(original[r, c]) != [0, 255, 0] and list(original[r+1, c]) == [0, 255, 0]:
			green.append((c, r))
	if len(green) == 3:
		avg = (green[0][1] + green[1][1] + green[2][1])/3
		original[avg, c] = [0, 255, 0]
		med.append((c, avg))

# this is only for visualisation, actually drawing
# will mess up estimations
#draw(med, original, color=(255, 0, 255))


# do otsu binarization on whole image, and give weightings to line estimations.. maybe make the top of image
# a baseline, and the top of the retina another baseline
# for guess lines, MOST of the line has to be above otsu thresh

# find otsu's threshold value with OpenCV function
cur_img = cv2.imread(CUR_IMAGE_PATH,0)
blur = cv2.GaussianBlur(cur_img,(5,5),0)
ret, otsu = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
tval = ret

# line: (c, r)
# takes in a list of coordinates and produces a weighting
# based on otsu's binarization
# possible weight measures: 
# 		* most of the lines has to be above otsu thresh value
#		* take avg grayscale value
def give_weight(line, thresh):
	avg = 0
	for i in line:
		avg += sum(original[i[1], i[0]])/3 

	return avg/len(line)

print(give_weight(med, tval))

# This section goes through each row
# and fits a polynomial through it
# and filters out insignificant points
'''
#r = 280
for r in range(rows):
	x, y = [], []
	for c in range(0, cols/2):
		x.append(c)
		y.append(sum(original[r, c])/3)

	fit_y = curve_fit(x, y, dgr=10)

	# writing to image
	for i in range(len(fit_y)):
		if y[i] > fit_y[i] + (fit_y[i] * 0.05):
			original[r, x[i]] = [0, 255, 0]

green = {}
#cv2.line(d_img, (p1[0], p1[1]), (p2[0], p2[1]), (0,255,0), 2)
for r in range(rows):
	row = []
	for c in range(0, cols/2, 10):
		if list(original[r, c]) == [0, 255, 0]:
			row.append(c)
	green[r] = row

# SIMULATES ABOVE PROCESS
green = {0: [0, 30, 50, 250, 320, 370, 460, 490], 1: [80, 200, 300, 370], 2: [40, 80, 300, 360], 3: [], 4: [0], 5: [0, 250, 390], 6: [120, 250], 7: [0], 8: [40, 160], 9: [], 10: [0, 130], 11: [430], 12: [], 13: [], 14: [], 15: [], 16: [50], 17: [], 18: [], 19: [40], 20: [], 21: [], 22: [], 23: [], 24: [30], 25: [40], 26: [0, 40], 27: [0, 40, 80], 28: [80], 29: [], 30: [0, 60], 31: [0, 60, 240], 32: [0], 33: [], 34: [], 35: [], 36: [], 37: [40], 38: [40], 39: [0], 40: [40, 140, 280], 41: [], 42: [0, 20], 43: [0], 44: [80], 45: [80], 46: [120], 47: [120, 240], 48: [80], 49: [], 50: [], 51: [], 52: [], 53: [10], 54: [10], 55: [10, 180, 390], 56: [], 57: [390], 58: [410], 59: [410], 60: [], 61: [420], 62: [180], 63: [210, 260, 400], 64: [0, 330], 65: [0], 66: [0, 420], 67: [0], 68: [0, 50, 280], 69: [0, 290], 70: [], 71: [40, 380], 72: [], 73: [40], 74: [40, 240], 75: [40, 240], 76: [40], 77: [440], 78: [40, 50], 79: [40, 50, 450, 490], 80: [20, 310, 440, 450, 490], 81: [0, 440, 450, 490], 82: [0, 440, 450, 490], 83: [440, 450, 490], 84: [20, 30, 350, 440, 450, 490], 85: [20, 30, 40, 350, 440, 450, 490], 86: [20, 30, 40, 350, 440, 450, 460, 490], 87: [0, 230, 260, 280, 300, 450, 460, 490], 88: [20, 30, 320, 450, 460, 490], 89: [20, 450, 460, 490], 90: [280, 320, 440, 450, 460, 490], 91: [30, 40, 80, 280, 440, 450, 490], 92: [30, 40, 60, 290, 450], 93: [30, 450], 94: [0, 30, 450], 95: [0, 20, 30, 40, 440, 450], 96: [30, 40, 330, 440, 450], 97: [30, 40, 250, 430, 450], 98: [30, 40, 250, 430, 450], 99: [20, 40, 280, 450], 100: [20, 30, 40, 310, 440, 450], 101: [20, 30, 40, 310, 430, 440, 450], 102: [20, 30, 40, 310, 430, 440, 450], 103: [20, 30, 40, 310, 440, 450], 104: [30, 40, 50, 440, 450], 105: [30, 40, 50, 280, 440], 106: [30, 40, 50, 280, 440], 107: [30, 40, 440, 480], 108: [20, 30, 40, 230, 440, 480], 109: [30, 40, 270, 420, 440, 480], 110: [30, 40, 270, 420, 480], 111: [30, 480], 112: [30, 40, 420, 480], 113: [30, 40, 420, 480], 114: [30, 40, 420, 480], 115: [30, 40, 280, 420, 480], 116: [30, 40, 280, 370, 420, 430, 480], 117: [0, 30, 40, 290, 370, 430, 480], 118: [30, 40, 400, 430, 480], 119: [30, 40, 240, 400, 430, 480], 120: [0, 30, 40, 400, 430, 480], 121: [30, 40, 400, 410, 420, 430, 480], 122: [30, 40, 400, 420, 430, 480], 123: [30, 40, 400, 420, 480], 124: [30, 40, 390, 480], 125: [30, 40, 390, 410, 480], 126: [30, 40, 390, 410, 480], 127: [0, 30, 40, 280, 390, 480], 128: [0, 30, 40, 390, 480], 129: [0, 30, 40, 220, 260, 480], 130: [30, 40, 220, 430, 480], 131: [20, 30, 40, 230, 480], 132: [0, 30, 40, 230, 480], 133: [30, 40, 450, 480], 134: [30, 40, 430, 480], 135: [30, 40, 360, 430, 480], 136: [0, 30, 40, 360, 430, 480], 137: [0, 30, 40, 420, 430, 440, 480], 138: [0, 30, 40, 420, 430, 440, 480], 139: [0, 30, 40, 430, 440, 480], 140: [30, 40, 160, 400, 430, 480], 141: [30, 40, 400, 410, 480], 142: [30, 40, 220, 300, 400, 410, 480], 143: [0, 30, 40, 220, 300, 400, 410, 480], 144: [0, 30, 200, 230, 290, 380, 390, 400, 410, 470, 480], 145: [40, 380, 390, 400, 410, 470, 480], 146: [30, 40, 190, 210, 220, 380, 390, 400, 410, 470, 480], 147: [30, 40, 200, 210, 220, 380, 390, 400, 410, 470, 480], 148: [30, 40, 180, 200, 210, 220, 380, 390, 400, 410, 470, 480], 149: [30, 40, 180, 190, 200, 210, 380, 390, 400, 410, 470, 480], 150: [30, 40, 180, 190, 200, 210, 260, 380, 390, 400, 410, 470, 480], 151: [0, 180, 190, 210, 230, 240, 380, 390, 400, 410, 420, 470, 480], 152: [40, 180, 200, 210, 220, 230, 240, 250, 370, 380, 390, 400, 410, 420, 470, 480], 153: [180, 200, 210, 220, 230, 240, 250, 370, 380, 390, 400, 410, 420, 470, 480], 154: [120, 180, 200, 210, 220, 230, 240, 370, 380, 390, 400, 410, 420, 470, 480], 155: [150, 160, 180, 190, 200, 210, 220, 230, 240, 370, 380, 390, 400, 410, 420, 470, 480], 156: [150, 160, 180, 190, 200, 210, 220, 230, 370, 380, 390, 400, 410, 420, 470, 480], 157: [160, 170, 180, 190, 200, 210, 220, 230, 370, 380, 390, 400, 410, 420, 470, 480], 158: [170, 180, 200, 210, 220, 230, 280, 360, 370, 380, 390, 400, 460, 470], 159: [170, 200, 210, 220, 240, 360, 370, 380, 390, 400, 460, 470], 160: [160, 180, 190, 200, 210, 220, 230, 240, 360, 370, 380, 390, 460, 470], 161: [160, 180, 190, 200, 210, 220, 230, 360, 370, 380, 390, 460, 470], 162: [160, 170, 180, 200, 210, 220, 230, 350, 370, 380, 390, 400, 460, 470], 163: [0, 170, 180, 200, 210, 220, 230, 250, 350, 360, 370, 380, 390, 400, 460, 470], 164: [0, 170, 180, 190, 200, 210, 220, 230, 250, 350, 360, 370, 380, 390, 460, 470], 165: [160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 350, 360, 370, 380, 390, 460, 470], 166: [150, 170, 180, 190, 200, 210, 220, 230, 240, 350, 360, 370, 380, 390, 400, 460, 470], 167: [150, 170, 180, 190, 200, 210, 220, 230, 350, 360, 370, 390, 400, 460, 470], 168: [40, 150, 160, 170, 180, 190, 200, 210, 220, 230, 350, 360, 390, 460, 470], 169: [150, 160, 170, 180, 190, 200, 210, 220, 230, 300, 320, 390, 460, 470], 170: [140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 300, 310, 320, 390, 460], 171: [130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 300, 310, 320, 390, 460, 490], 172: [130, 150, 160, 170, 180, 190, 200, 210, 300, 310, 320, 390, 460, 490], 173: [0, 130, 150, 160, 170, 180, 190, 200, 290, 300, 310, 460, 490], 174: [160, 170, 270, 280, 290, 300, 310, 460, 490], 175: [110, 160, 270, 280, 290, 300, 310, 400, 460, 490], 176: [10, 40, 110, 120, 130, 260, 270, 280, 290, 400, 460, 490], 177: [40, 70, 260, 270, 280, 290, 400, 460, 490], 178: [30, 40, 110, 260, 270, 280, 290, 400, 410, 460, 490], 179: [10, 30, 40, 110, 250, 260, 270, 280, 410, 460, 490], 180: [10, 20, 30, 40, 60, 90, 240, 250, 260, 270, 280, 410, 490], 181: [0, 20, 30, 40, 240, 250, 260, 270, 280, 410], 182: [0, 20, 30, 40, 50, 60, 70, 220, 240, 250, 260, 270, 400, 410], 183: [0, 20, 30, 40, 50, 60, 70, 80, 120, 220, 230, 240, 250, 260, 270, 370, 400, 470], 184: [0, 20, 30, 40, 50, 60, 80, 220, 230, 240, 250, 260, 410, 470], 185: [0, 10, 20, 30, 40, 50, 60, 80, 110, 220, 230, 240, 250, 260, 410, 470], 186: [0, 10, 20, 30, 40, 50, 110, 210, 220, 230, 240, 250, 410, 470], 187: [0, 10, 20, 30, 40, 50, 60, 200, 210, 220, 230, 250, 410, 470], 188: [0, 10, 30, 40, 60, 70, 200, 210, 220, 230, 470], 189: [0, 10, 40, 200, 210, 220, 230, 470], 190: [0, 10, 40, 50, 80, 190, 200, 210, 220, 230, 470], 191: [0, 10, 40, 190, 200, 210, 220, 470], 192: [0, 40, 180, 190, 200, 210, 220, 390, 470, 480], 193: [40, 180, 190, 200, 210, 220, 470, 480], 194: [40, 170, 180, 190, 200, 470, 480], 195: [40, 170, 180, 190, 200, 210, 360, 460, 470], 196: [160, 170, 180, 190, 200, 210, 360, 380, 460, 470], 197: [160, 170, 180, 190, 200, 350, 360, 460, 470], 198: [160, 170, 180, 190, 200, 350, 460, 470], 199: [150, 160, 170, 180, 190, 200, 390, 460, 470], 200: [150, 160, 170, 180, 190, 200, 340, 380, 460, 470, 480], 201: [140, 150, 160, 170, 190, 380, 470], 202: [0, 130, 140, 150, 160, 170, 380, 400, 470, 480], 203: [0, 130, 140, 150, 160, 170, 390, 400, 460, 470, 480], 204: [0, 120, 130, 140, 150, 160, 170, 320, 390, 400, 460, 470, 480], 205: [0, 120, 130, 140, 150, 160, 320, 390, 400, 470, 480], 206: [0, 120, 130, 140, 160, 390, 400, 480], 207: [0, 110, 120, 130, 160, 280, 390, 400, 480], 208: [0, 100, 120, 240, 260, 270, 280, 390, 400, 410], 209: [20, 30, 80, 90, 250, 260, 270, 280, 400, 410], 210: [20, 30, 40, 60, 80, 90, 250, 260, 270, 400, 410], 211: [30, 40, 50, 60, 70, 80, 240, 250, 260, 270, 400, 410], 212: [30, 40, 50, 60, 80, 240, 250, 410], 213: [30, 40, 50, 60, 70, 80, 230, 240, 250, 410], 214: [40, 50, 60, 70, 80, 230, 240, 250, 360], 215: [40, 50, 60, 70, 230, 340, 360, 440], 216: [40, 50, 60, 70, 220, 230, 350, 360, 370, 450], 217: [40, 50, 60, 220, 250, 350, 360, 370], 218: [40, 50, 60, 210, 220, 340, 350, 360, 370, 380, 450], 219: [40, 50, 60, 210, 220, 340, 350, 370, 380, 450], 220: [50, 210, 220, 340, 350, 380, 450], 221: [170, 200, 210], 222: [170, 200, 330, 400, 410, 480], 223: [170, 180, 200, 320, 400, 410], 224: [40, 50, 60, 160, 170, 180, 280, 290, 320, 410, 420], 225: [40, 50, 60, 160, 170, 180, 270, 280, 290, 300, 310, 410, 420], 226: [40, 50, 60, 170, 270, 280, 290, 300, 310, 410, 420], 227: [40, 50, 120, 170, 270, 280, 290, 300, 310, 410, 420, 490], 228: [40, 120, 160, 170, 260, 270, 280, 290, 410, 420, 490], 229: [40, 150, 160, 260, 270, 280, 290, 300, 410, 420, 430, 440, 490], 230: [50, 150, 250, 260, 270, 280, 290, 300, 410, 430, 490], 231: [50, 60, 130, 150, 240, 250, 260, 270, 280, 290, 410, 430, 490], 232: [0, 40, 60, 130, 240, 250, 260, 270, 280, 440, 490], 233: [110, 130, 240, 250, 260, 270], 234: [40, 110, 130, 230, 240, 250, 260], 235: [40, 50, 110, 130, 230, 240, 250, 260], 236: [40, 50, 60, 100, 110, 120, 130, 220, 230, 240, 250], 237: [30, 40, 50, 60, 100, 110, 120, 130, 220, 230, 240, 250], 238: [30, 50, 60, 100, 110, 120, 220, 230, 240], 239: [30, 50, 60, 100, 110, 120, 220, 230, 240, 390], 240: [30, 50, 100, 200, 210, 220, 230, 380], 241: [30, 40, 50, 80, 90, 200, 210, 220, 230, 380], 242: [30, 40, 50, 60, 70, 80, 90, 200, 210, 220], 243: [30, 40, 50, 60, 70, 200, 210, 250], 244: [40, 50, 60, 190, 200], 245: [40, 50, 60, 170, 180, 190, 200, 380, 470], 246: [40, 70, 170, 180, 200, 380, 470], 247: [70, 160, 170, 180, 380, 390], 248: [160, 170, 180, 260, 380, 390, 480], 249: [150, 160, 170, 180, 380, 390, 470, 480], 250: [150, 160, 170, 180, 370, 380, 390, 400, 470, 480], 251: [150, 160, 170, 370, 390, 470, 480], 252: [130, 140, 150, 160, 170, 290, 440, 480], 253: [130, 140, 150, 160, 290, 440], 254: [130, 140, 150, 160, 330, 430, 440], 255: [0, 110, 120, 130, 140, 150, 160, 330, 340, 430, 440, 450, 490], 256: [0, 10, 110, 120, 130, 140, 260, 330, 340, 440, 450, 490], 257: [0, 10, 110, 120, 130, 330, 340, 440], 258: [0, 10, 20, 100, 110, 120, 130, 250, 330, 340, 390, 440], 259: [10, 20, 100, 110, 120, 240, 250, 320, 330, 390], 260: [20, 30, 90, 100, 110, 120, 240, 250, 270, 310, 320, 380, 390], 261: [20, 30, 40, 80, 90, 100, 110, 240, 270, 310, 380, 390, 400], 262: [30, 40, 50, 60, 70, 80, 90, 100, 260, 290, 310, 380], 263: [40, 50, 60, 70, 80, 90, 280, 290, 300], 264: [30, 40, 50, 60, 70, 80, 280, 290, 300, 360], 265: [30, 40, 50, 60, 70, 80, 280, 290, 450], 266: [40, 50, 60, 70, 280, 290, 440], 267: [40, 50, 60, 70, 240, 260, 270, 280], 268: [40, 240, 260, 270, 330, 390], 269: [30, 260, 330, 390], 270: [50, 70, 250, 260, 320], 271: [50, 110, 240, 250, 260, 320], 272: [20, 130, 240, 250, 320, 480], 273: [110, 240, 290, 300, 480], 274: [110, 240, 280, 290, 300, 480], 275: [20, 40, 230, 270, 280, 290], 276: [0, 40, 230, 270, 280, 290, 390, 450, 480], 277: [0, 40, 220, 230, 270, 280, 290, 380, 390, 450, 480], 278: [220, 260, 270, 280, 370, 380, 450, 480], 279: [20, 210, 220, 260, 270, 370, 380, 450, 480], 280: [50, 210, 250, 260, 270, 340, 370, 450], 281: [40, 200, 210, 250, 260, 270, 340, 360, 450], 282: [40, 160, 200, 250, 260, 340, 350, 360, 440, 450], 283: [200, 250, 260, 330, 340, 350, 360, 440, 450], 284: [190, 200, 240, 250, 260, 330, 340, 350, 430, 440, 450, 490], 285: [190, 240, 250, 320, 330, 340, 430, 440, 450, 490], 286: [160, 180, 230, 240, 320, 330, 340, 440, 450, 490], 287: [30, 170, 180, 230, 310, 320, 330, 440, 450, 490], 288: [30, 170, 300, 310, 320, 330, 440, 450, 490], 289: [160, 170, 300, 310, 320, 440, 450, 490], 290: [160, 170, 290, 300, 310, 320, 440, 450, 490], 291: [150, 160, 290, 300, 310, 440, 450, 490], 292: [150, 160, 280, 290, 300, 440, 490], 293: [140, 150, 270, 280, 290, 300, 450, 490], 294: [0, 130, 140, 270, 280, 290, 450, 490], 295: [120, 130, 140, 260, 270, 280, 290, 420, 440, 450, 490], 296: [0, 110, 120, 130, 260, 270, 280, 290, 440, 450, 490], 297: [0, 20, 100, 110, 120, 130, 260, 270, 280, 440, 450, 490], 298: [20, 30, 100, 110, 120, 250, 260, 270, 280, 430, 440, 450, 490], 299: [20, 30, 40, 90, 100, 110, 250, 260, 270, 430, 440, 450, 490], 300: [30, 40, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 430, 440, 450, 490], 301: [40, 50, 60, 70, 80, 90, 240, 250, 260, 420, 430, 450, 490], 302: [40, 50, 60, 70, 80, 230, 240, 250, 260, 420, 430, 450, 490], 303: [0, 40, 50, 60, 70, 80, 230, 240, 250, 420, 450, 490], 304: [0, 10, 40, 50, 60, 70, 140, 230, 240, 250, 450, 490], 305: [0, 10, 50, 70, 130, 140, 220, 230, 240, 450, 490], 306: [0, 10, 20, 120, 130, 220, 230, 280, 490], 307: [0, 10, 20, 110, 120, 130, 210, 220, 230, 280, 450, 490], 308: [0, 10, 20, 30, 110, 120, 210, 220, 450, 490], 309: [0, 10, 20, 30, 110, 120, 200, 210, 220, 490], 310: [10, 20, 30, 40, 110, 200, 210, 490], 311: [20, 30, 40, 50, 60, 100, 200, 210, 260], 312: [20, 30, 40, 50, 60, 70, 90, 100, 190, 200, 450], 313: [30, 40, 50, 60, 70, 180, 190, 200], 314: [30, 40, 50, 60, 70, 80, 90, 180, 190, 480], 315: [40, 50, 60, 170, 180, 190, 360, 390, 470, 480], 316: [0, 10, 170, 180, 190, 350, 360, 380, 390, 470, 480], 317: [0, 10, 160, 170, 180, 210, 350, 360, 370, 380, 390, 470, 480], 318: [0, 10, 20, 150, 160, 170, 210, 350, 360, 380, 470, 480], 319: [0, 10, 140, 150, 160, 170, 200, 220, 350, 360, 370, 380, 470, 480], 320: [10, 20, 140, 150, 160, 170, 200, 350, 360, 370, 380, 470, 480], 321: [10, 20, 130, 140, 150, 160, 180, 190, 200, 210, 340, 350, 360, 370, 380, 460, 470, 480], 322: [0, 10, 20, 130, 140, 150, 160, 180, 190, 350, 360, 370, 380, 460, 470, 480], 323: [0, 10, 20, 130, 140, 150, 160, 170, 180, 190, 350, 360, 370, 460, 470, 480], 324: [0, 10, 20, 120, 130, 140, 160, 170, 180, 190, 350, 360, 370, 470, 480], 325: [0, 20, 110, 120, 130, 140, 170, 190, 350, 360, 370, 470, 480], 326: [20, 110, 120, 130, 170, 350, 360, 370, 380, 460, 470], 327: [20, 110, 120, 170, 350, 360, 370, 380, 460], 328: [160, 170, 350, 360, 370, 460, 470], 329: [160, 350, 360, 370, 460], 330: [140, 160, 350, 360, 370], 331: [140, 160, 360, 370, 380, 470, 480], 332: [140, 360, 370, 380, 480], 333: [120, 130, 140, 360, 370, 380], 334: [120, 130, 140, 360, 370, 460], 335: [110, 120, 130, 140, 350, 370, 380, 460], 336: [110, 120, 260, 270, 370, 380], 337: [100, 110, 120, 270, 380], 338: [100, 120, 270, 280], 339: [100, 260, 270, 290, 380], 340: [90, 260, 270, 290, 300, 380, 490], 341: [80, 90, 250, 270, 280, 290, 300, 490], 342: [60, 80, 90, 240, 250, 270, 280, 290, 300, 390, 490], 343: [60, 80, 90, 240, 250, 270, 280, 290, 390], 344: [60, 80, 90, 240, 250, 260, 270, 280, 290, 300, 400, 420, 430, 490], 345: [60, 70, 90, 240, 250, 260, 270, 280, 290, 300, 400, 430, 490], 346: [70, 90, 100, 250, 260, 270, 280, 290, 300, 430, 490], 347: [50, 60, 80, 90, 100, 250, 260, 270, 280, 290, 300, 410, 430, 440, 490], 348: [50, 60, 80, 90, 100, 250, 260, 270, 280, 290, 300, 310, 410, 430, 440, 490], 349: [30, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 310, 400, 410, 430, 440, 490], 350: [30, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 410, 420, 430, 440, 490], 351: [30, 40, 50, 60, 70, 80, 90, 100, 110, 240, 250, 260, 270, 280, 290, 300, 410, 420, 430, 440, 490], 352: [20, 30, 40, 50, 60, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 420, 430, 440, 490], 353: [20, 30, 40, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 410, 420, 430, 440, 490], 354: [20, 30, 40, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 410, 420, 430, 440, 490], 355: [30, 40, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 410, 420, 430, 490], 356: [30, 40, 50, 60, 70, 80, 90, 100, 240, 250, 260, 270, 280, 290, 300, 400, 410, 420, 430, 440, 490], 357: [30, 40, 50, 60, 70, 80, 90, 100, 230, 240, 250, 260, 270, 280, 290, 300, 400, 410, 420, 430, 490], 358: [20, 30, 40, 50, 60, 70, 80, 90, 100, 230, 240, 250, 260, 270, 280, 290, 300, 420, 430, 440, 490], 359: [20, 30, 40, 50, 60, 70, 80, 90, 100, 230, 240, 250, 260, 280, 290, 300, 410, 420, 430, 440, 490], 360: [20, 30, 40, 50, 60, 70, 80, 90, 100, 230, 240, 250, 270, 280, 290, 300, 310, 400, 410, 420, 430, 490], 361: [20, 30, 40, 50, 60, 70, 80, 90, 230, 240, 250, 270, 280, 290, 300, 410, 420, 430, 490], 362: [30, 40, 50, 60, 70, 80, 90, 230, 240, 250, 260, 270, 280, 290, 300, 420, 430, 490], 363: [30, 40, 50, 60, 70, 80, 90, 230, 240, 250, 260, 270, 290, 300, 400, 420, 430, 490], 364: [30, 40, 50, 60, 70, 80, 90, 230, 240, 250, 260, 270, 280, 290, 300, 400, 420, 430, 490], 365: [30, 40, 50, 60, 70, 80, 240, 250, 260, 270, 280, 290, 300, 410, 420, 490], 366: [30, 40, 50, 60, 70, 80, 240, 250, 260, 270, 280, 290, 410, 420], 367: [30, 40, 50, 60, 70, 80, 90, 240, 250, 260, 270, 290, 440], 368: [20, 30, 40, 50, 60, 70, 80, 90, 230, 240, 250, 260, 280, 290, 300, 420, 430, 490], 369: [20, 30, 40, 50, 60, 70, 80, 90, 230, 240, 260, 270, 280, 290, 420, 490], 370: [20, 30, 40, 50, 60, 70, 80, 230, 270, 280, 290, 420], 371: [20, 30, 40, 50, 60, 70, 80, 230, 270, 280, 300, 420], 372: [20, 30, 40, 50, 60, 70, 80, 90, 250, 280, 300, 420], 373: [30, 40, 50, 60, 70, 80, 250, 280, 290, 300, 430], 374: [30, 40, 50, 60, 70, 100, 250, 280, 290, 300, 430], 375: [30, 40, 50, 60, 70, 100, 250, 270, 280, 290, 400, 410, 430, 490], 376: [30, 50, 60, 70, 80, 100, 240, 250, 270, 280, 430], 377: [30, 50, 60, 80, 270, 290], 378: [30, 40, 50, 60, 80, 270, 290], 379: [30, 40, 50, 60, 70, 250, 290], 380: [30, 40, 50, 60, 70, 80, 90, 250, 290], 381: [40, 50, 60, 70, 80, 90, 280, 290, 410], 382: [50, 60, 70, 90, 280, 410], 383: [60, 70, 90, 270], 384: [50, 60, 80, 250], 385: [40, 50, 60, 70, 80], 386: [40, 50, 70, 80, 260], 387: [40, 50], 388: [370], 389: [], 390: [], 391: [60, 70, 300, 360], 392: [0, 230, 300, 460], 393: [], 394: [40], 395: [40, 240], 396: [50, 400], 397: [0, 40, 260, 400], 398: [40, 400], 399: [20, 40], 400: [0, 40, 170], 401: [0, 30], 402: [0, 30], 403: [30, 50, 250], 404: [50], 405: [50], 406: [50], 407: [70, 300], 408: [40, 50, 90, 200, 260, 270], 409: [40, 50, 260, 270], 410: [260, 270], 411: [270], 412: [50, 270], 413: [40, 50], 414: [50], 415: [], 416: [200, 240], 417: [], 418: [], 419: [], 420: [], 421: [], 422: [70], 423: [70, 280], 424: [], 425: [0], 426: [0], 427: [70], 428: [20, 70, 90, 280], 429: [50, 280], 430: [40], 431: [40, 80, 270], 432: [], 433: [210, 470], 434: [470], 435: [470], 436: [], 437: [], 438: [0], 439: [0], 440: [], 441: [], 442: [60, 160], 443: [60, 160], 444: [400], 445: [160, 400], 446: [], 447: [180], 448: [0], 449: [0, 460], 450: [150, 260, 460], 451: [150], 452: [], 453: [0, 350], 454: [0], 455: [100, 360, 480], 456: [], 457: [], 458: [280], 459: [], 460: [], 461: [240], 462: [240, 480], 463: [], 464: [50, 60, 420], 465: [280], 466: [0, 280], 467: [0, 80], 468: [], 469: [], 470: [], 471: [0], 472: [460], 473: [], 474: [0, 40, 240], 475: [0, 40], 476: [100], 477: [330], 478: [40, 330], 479: [40, 330], 480: [310], 481: [310], 482: [], 483: [], 484: [160], 485: [], 486: [], 487: [100, 140, 230, 240], 488: [80, 130, 260, 360], 489: [240], 490: [240], 491: [40], 492: [40], 493: [40, 240], 494: [240], 495: [280], 496: [100, 250], 497: [0], 498: [10, 120, 440], 499: [10, 30, 60, 70, 90, 100, 120, 150, 200, 330, 340, 400, 440]}
for r in green:
	for c in green[r]:
		original[r, c] = [0, 255, 0]
'''

# writing modified image files
NEW_IMAGE_PATH = CUR_IMAGE_PATH.split('.')[0] + '_modified.jpg'
cv2.imwrite(NEW_IMAGE_PATH, original)

# shows top and bottom clearly but nothing else
#cv2.imwrite(CUR_IMAGE_PATH.split('.')[0] + '_binary.jpg', binary)

cv2.imwrite(CUR_IMAGE_PATH.split('.')[0] + '_despeck.jpg', img_thresh)




# ADDITIONAL NOTES #########################
# gaussian peaks
# fourier transform
# maximum entropy

# comparing dilation to original image

# TODO-- try straightening the image out in imagej
# then do the ctrl+k filter thing to find peaks
# edit -> options -> draw a line (500 thickness) across one of the curves
# edit -> selection -> straighten
